---
--- Test Overflow with NO CYCLE
---
CREATE TABLE tmp_table (a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO tmp_table VALUES (0),(1),(2),(3);
-- Test execution of nextval on master with CACHE 1
CREATE SEQUENCE tmp_seq INCREMENT 1 MINVALUE 1 MAXVALUE 2 START 1 CACHE 1 NO CYCLE;
SELECT nextval('tmp_seq');
 nextval
---------
       1
(1 row)

SELECT nextval('tmp_seq');
 nextval
---------
       2
(1 row)

-- Fails because it reaches MAXVALUE
SELECT nextval('tmp_seq');
ERROR:  nextval: reached maximum value of sequence "tmp_seq" (2)
DROP SEQUENCE tmp_seq;
-- Test that ORCA and Planner return the same results although they produce different execution plans.
CREATE SEQUENCE tmp_seq INCREMENT 1 MINVALUE 1 MAXVALUE 4 START 1 CACHE 1 NO CYCLE;
SELECT val from (SELECT nextval('tmp_seq'), a as val FROM tmp_table ORDER BY a) as val ORDER BY val;
 val
-----
   0
   1
   2
   3
(4 rows)

DROP SEQUENCE tmp_seq;
-- Test execution of nextval on master with CACHE > 1
CREATE SEQUENCE tmp_seq INCREMENT 1 MINVALUE 1 MAXVALUE 2 START 1 CACHE 20 NO CYCLE;
SELECT nextval('tmp_seq');
 nextval
---------
       1
(1 row)

SELECT nextval('tmp_seq');
 nextval
---------
       2
(1 row)

-- Fails because it reaches MAXVALUE
SELECT nextval('tmp_seq');
ERROR:  nextval: reached maximum value of sequence "tmp_seq" (2)
DROP SEQUENCE tmp_seq;
-- Test execution of nextval on master (when optimizer = on) and segments (when optimizer=off) with CACHE > 1
CREATE SEQUENCE tmp_seq INCREMENT 1 MINVALUE 1 MAXVALUE 4 START 1 CACHE 20 NO CYCLE;
SELECT nextval('tmp_seq'), a FROM tmp_table ORDER BY a;
 nextval | a
---------+---
       1 | 0
       2 | 1
       3 | 2
       4 | 3
(4 rows)

DROP SEQUENCE tmp_seq;
DROP TABLE tmp_table;
