drop table if exists test_exec;
create table test_exec (a integer);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into test_exec select a from generate_series(1,100) a;
set log_min_messages=debug5;
select count(*) from test_exec;
 count 
-------
   100
(1 row)

set debug_print_slice_table=on;
select count(*) from test_exec;
 count 
-------
   100
(1 row)

--FOR UPDATE/FOR SHARE
select * from test_exec order by a limit 1 for update;
 a 
---
 1
(1 row)

select * from test_exec order by a limit 1 for share;
 a 
---
 1
(1 row)

--returning clause
insert into test_exec values (1) returning *;
ERROR:  The RETURNING clause of the INSERT statement is not supported in this version of Greenplum Database.
drop table if exists test_exec;
create table test_exec (a integer);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into test_exec select a from generate_series(1,5) a;
set log_min_messages=debug5;
select * from test_exec limit null;
 a 
---
 1
 2
 3
 4
 5
(5 rows)

select * from test_exec limit 0;
 a 
---
(0 rows)

