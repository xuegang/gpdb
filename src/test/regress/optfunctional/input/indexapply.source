
-- ----------------------------------------------------------------------
-- Test: setup.sql
-- ----------------------------------------------------------------------

-- start_ignore
create schema indexapply;
set search_path to indexapply;
-- end_ignore

-- ----------------------------------------------------------------------
-- Test: sql_bfv_other/mpp22263.sql
-- ----------------------------------------------------------------------

-- start_ignore
drop table if exists mpp22263;

CREATE TABLE mpp22263 (
	unique1		int4,
	unique2		int4,
	two			int4,
	four		int4,
	ten			int4,
	twenty		int4,
	hundred		int4,
	thousand	int4,
	twothousand	int4,
	fivethous	int4,
	tenthous	int4,
	odd			int4,
	even		int4,
	stringu1	name,
	stringu2	name,
	string4		name
) distributed by (unique1);

create index mpp22263_idx1 on mpp22263 using btree(unique1);
-- end_ignore

-- @author onosen
-- @created 2015-01-08 18:00:00
-- @tags ORCA bfv
-- @gpopt 1.522
-- @description bfv for MPP-22263

--start_ignore
explain
select * from mpp22263, (values(147, 'RFAAAA'), (931, 'VJAAAA')) as v (i, j)
    WHERE mpp22263.unique1 = v.i and mpp22263.stringu1 = v.j;
--end_ignore

\!grep 'Filter: mpp22263.stringu1::text = "outer".column2' @abs_srcdir@/results/indexapply.out | wc -l

-- ----------------------------------------------------------------------
-- Test: sql_bfv_other/mpp25537.sql
-- ----------------------------------------------------------------------

-- @author gcaragea
-- @created 2015-05-08 18:00:00
-- @tags ORCA bfv
-- @gpopt 1.577
-- @description bfv for MPP-25537

--start_ignore
DROP TABLE IF EXISTS mpp25537_facttable1;
DROP TABLE IF EXISTS mpp25537_dimdate;
DROP TABLE IF EXISTS mpp25537_dimtabl1;
--end_ignore

CREATE TABLE mpp25537_facttable1 (
col1 integer,
wk_id smallint,
id integer
)
with (appendonly=true, orientation=column, compresstype=zlib, compresslevel=5)
partition by range (wk_id) (
start (1::smallint) END (20::smallint) inclusive every (1),
default partition dflt
)
;

insert into mpp25537_facttable1 select col1, col1, col1 from (select generate_series(1,20) col1)a;

CREATE TABLE mpp25537_dimdate (
wk_id smallint,
col2 date
)
;

insert into mpp25537_dimdate select col1, current_date - col1 from (select generate_series(1,20,2) col1)a;

CREATE TABLE mpp25537_dimtabl1 (
id integer,
col2 integer
)
;

insert into mpp25537_dimtabl1 select col1, col1 from (select generate_series(1,20,3) col1)a;

CREATE INDEX idx_mpp25537_facttable1 on mpp25537_facttable1 (id); 

set optimizer_analyze_root_partition to on;
set optimizer to on;

ANALYZE mpp25537_facttable1;
ANALYZE mpp25537_dimdate;
ANALYZE mpp25537_dimtabl1;

SELECT count(*) 
FROM mpp25537_facttable1 ft, mpp25537_dimdate dt, mpp25537_dimtabl1 dt1
WHERE ft.wk_id = dt.wk_id
AND ft.id = dt1.id;

-- ----------------------------------------------------------------------
-- Test: sql/mpp21852.sql
-- ----------------------------------------------------------------------

-- start_ignore
drop table x;
drop table y;
create table x ( i int, j int, k int, m int) distributed by (i);
create table y ( i int, j int, k int, m int) distributed by (i);
insert into x (i, j, k, m) values
    (3,3,3,3), (7,7,7,7), (11,1,1,1), (15,5,5,5), (19,9,9,9),
    (23,13,3,3), (27,17,7,7), (31,21,11,1), (35,25,15,5), (39,29,19,9),
    (1,1,1,1), (5,5,5,5), (9,9,9,9), (13,3,3,3), (17,7,7,7),
    (21,11,1,1), (25,15,5,5), (29,19,9,9), (33,23,13,3), (37,27,17,7),
    (2,2,2,2), (6,6,6,6), (10,10,10,10), (14,4,4,4), (18,8,8,8),
    (22,12,2,2), (26,16,6,6), (30,20,10,10), (34,24,14,4), (38,28,18,8),
    (4,4,4,4), (8,8,8,8), (12,2,2,2), (16,6,6,6), (20,10,10,10),
    (24,14,4,4), (28,18,8,8), (32,22,12,2), (36,26,16,6), (40,30,20,10);
insert into y (i, j, k, m) values
    (3,13,23,33), (7,17,27,37), (4,14,24,34), (8,18,28,38), (2,12,22,32),
    (6,16,26,36), (10,20,30,40), (1,11,21,31), (5,15,25,35), (9,19,29,39);

--create INDEX x_idx on x using %idxtype%(%xIDX%);
create INDEX x_idx on x (NONE);
create INDEX y_idx on y (j);

create function plusone(x int) RETURNS int AS $$
BEGIN
    RETURN x + 5;
END;
$$ language plpgsql;


create function plusone(x varchar) RETURNS varchar AS $$
BEGIN
    RETURN x || 'a';
END;
$$ language plpgsql;


create function plusone(x text) RETURNS text AS $$
BEGIN
    RETURN x || 'x';
END;
$$ language plpgsql;

set optimizer_enable_indexjoin=on;
-- end_ignore

-- @author onosen
select * from x, y where x.i + x.j < y.j;
-- @author onosen
select * from x, y where y.j > x.i + x.j + 2;

-- ----------------------------------------------------------------------
-- Test: teardown.sql
-- ----------------------------------------------------------------------

-- start_ignore
drop schema indexapply cascade;
-- end_ignore
