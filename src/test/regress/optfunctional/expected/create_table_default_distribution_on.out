-- ----------------------------------------------------------------------
-- Test: setup.sql
-- ----------------------------------------------------------------------
-- start_ignore
create schema create_table_default_distribution_on;
set search_path to create_table_default_distribution_on;
set gp_create_table_random_default_distribution=on;
-- end_ignore
-- ----------------------------------------------------------------------
-- Test: sql/create_table_as.sql
-- ----------------------------------------------------------------------
-- start_ignore
DROP TABLE IF EXISTS distpol;
NOTICE:  table "distpol" does not exist, skipping
create table distpol as select random(), 1 as a, 2 as b;
NOTICE:  Using default RANDOM distribution since no distribution was specified.
HINT:  Consider including the 'DISTRIBUTED BY' clause to determine the distribution of rows.
DROP TABLE IF EXISTS hobbies_r;
NOTICE:  table "hobbies_r" does not exist, skipping
CREATE TABLE hobbies_r (
	name		text,
	person 		text
);
NOTICE:  Using default RANDOM distribution since no distribution was specified.
HINT:  Consider including the 'DISTRIBUTED BY' clause to determine the distribution of rows.
DROP TABLE IF EXISTS bar;
NOTICE:  table "bar" does not exist, skipping
CREATE TABLE bar AS SELECT * FROM hobbies_r;
NOTICE:  Table doesn't have 'distributed by' clause. Creating a NULL policy entry.
-- end_ignore
set optimizer=on;
-- Make sure random default distribution works for CTAS
select attrnums from gp_distribution_policy where
  localoid = 'distpol'::regclass;
 attrnums 
----------
 
(1 row)

-- Test RANDOM default distribution with AS clause containing a SELECT block
select attrnums from gp_distribution_policy where localoid='bar'::regclass;
 attrnums 
----------
 
(1 row)

-- Test RANDOM distribution with ON COMMIT option
begin;
drop table if exists r3_1;
NOTICE:  table "r3_1" does not exist, skipping
create temp table r3_1 on commit preserve rows as select 10 as a1, 20 as b1, 30 as c1, 40 as d1;
NOTICE:  Table doesn't have 'distributed by' clause. Creating a NULL policy entry.
select attrnums from gp_distribution_policy where localoid='r3_1'::regclass;
 attrnums 
----------
 
(1 row)

drop table if exists r3_2;
NOTICE:  table "r3_2" does not exist, skipping
create temp table r3_2 on commit delete rows as select 10 as a2, 20 as b2, 30 as c2, 40 as d2;
NOTICE:  Table doesn't have 'distributed by' clause. Creating a NULL policy entry.
select attrnums from gp_distribution_policy where localoid='r3_2'::regclass;
 attrnums 
----------
 
(1 row)

drop table if exists r3_3;
NOTICE:  table "r3_3" does not exist, skipping
create temp table r3_3 on commit drop as select 10 as a3, 20 as b3, 30 as c3, 40 as d3;
NOTICE:  Table doesn't have 'distributed by' clause. Creating a NULL policy entry.
select attrnums from gp_distribution_policy where localoid='r3_3'::regclass;
 attrnums 
----------
 
(1 row)

end;
set optimizer=off;
-- Make sure random default distribution works for CTAS
select attrnums from gp_distribution_policy where
  localoid = 'distpol'::regclass;
 attrnums 
----------
 
(1 row)

-- Test RANDOM default distribution with AS clause containing a SELECT block
select attrnums from gp_distribution_policy where localoid='bar'::regclass;
 attrnums 
----------
 
(1 row)

-- Test RANDOM distribution with ON COMMIT option
begin;
drop table if exists r3_1;
create temp table r3_1 on commit preserve rows as select 10 as a1, 20 as b1, 30 as c1, 40 as d1;
NOTICE:  Using default RANDOM distribution since no distribution was specified.
HINT:  Consider including the 'DISTRIBUTED BY' clause to determine the distribution of rows.
select attrnums from gp_distribution_policy where localoid='r3_1'::regclass;
 attrnums 
----------
 
(1 row)

drop table if exists r3_2;
create temp table r3_2 on commit delete rows as select 10 as a2, 20 as b2, 30 as c2, 40 as d2;
NOTICE:  Using default RANDOM distribution since no distribution was specified.
HINT:  Consider including the 'DISTRIBUTED BY' clause to determine the distribution of rows.
select attrnums from gp_distribution_policy where localoid='r3_2'::regclass;
 attrnums 
----------
 
(1 row)

drop table if exists r3_3;
NOTICE:  table "r3_3" does not exist, skipping
create temp table r3_3 on commit drop as select 10 as a3, 20 as b3, 30 as c3, 40 as d3;
NOTICE:  Using default RANDOM distribution since no distribution was specified.
HINT:  Consider including the 'DISTRIBUTED BY' clause to determine the distribution of rows.
select attrnums from gp_distribution_policy where localoid='r3_3'::regclass;
 attrnums 
----------
 
(1 row)

end;
-- ----------------------------------------------------------------------
-- Test: sql/create_table_inherits.sql
-- ----------------------------------------------------------------------
-- start_ignore
DROP TABLE IF EXISTS person CASCADE;
NOTICE:  table "person" does not exist, skipping
CREATE TABLE person (
	name 		text,
	age			int4,
	location 	point
) DISTRIBUTED BY (name);
CREATE TABLE staff_member (
	salary 		int4,
	manager 	name
) INHERITS (person) WITH OIDS;
NOTICE:  Table has parent, setting distribution columns to match parent table
NOTICE:  OIDS=TRUE is not recommended for user-created tables. Use OIDS=FALSE to prevent wrap-around of the OID counter
CREATE TABLE student (
	gpa 		float8
) INHERITS (person);
NOTICE:  Table has parent, setting distribution columns to match parent table
CREATE TABLE stud_emp (
	percent 	int4
) INHERITS (staff_member, student);
NOTICE:  Table has parent, setting distribution columns to match parent table
NOTICE:  merging multiple inherited definitions of column "name"
NOTICE:  merging multiple inherited definitions of column "age"
NOTICE:  merging multiple inherited definitions of column "location"
NOTICE:  OIDS=TRUE is not recommended for user-created tables. Use OIDS=FALSE to prevent wrap-around of the OID counter
-- end_ignore
select attrnums from gp_distribution_policy where
  localoid = 'staff_member'::regclass;
 attrnums 
----------
 {1}
(1 row)

select attrnums from gp_distribution_policy where
  localoid = 'student'::regclass;
 attrnums 
----------
 {1}
(1 row)

select attrnums from gp_distribution_policy where
  localoid = 'stud_emp'::regclass;
 attrnums 
----------
 {1}
(1 row)

-- ----------------------------------------------------------------------
-- Test: sql/create_table_like.sql
-- ----------------------------------------------------------------------
-- start_ignore
DROP TABLE IF EXISTS person CASCADE;
NOTICE:  drop cascades to table student
NOTICE:  drop cascades to table stud_emp
NOTICE:  drop cascades to table staff_member
CREATE TABLE person (
	name 		text,
	age			int4,
	location 	point
) DISTRIBUTED BY (name);
DROP TABLE IF EXISTS person_copy;
NOTICE:  table "person_copy" does not exist, skipping
CREATE TABLE person_copy (LIKE person);
NOTICE:  Table doesn't have 'distributed by' clause, defaulting to distribution columns from LIKE table
-- end_ignore
select attrnums from gp_distribution_policy where
  localoid = 'person'::regclass;
 attrnums 
----------
 {1}
(1 row)

-- test that LIKE clause does not affect default distribution
select attrnums from gp_distribution_policy where
  localoid = 'person_copy'::regclass;
 attrnums 
----------
 {1}
(1 row)

-- ----------------------------------------------------------------------
-- Test: sql_gpdb/create_table_unique.sql
-- ----------------------------------------------------------------------
-- start_ignore
drop table if exists distpol;
create table distpol(c1 int, c2 text) distributed by (c1);
-- end_ignore
-- UNIQUE default behavior
DROP TABLE IF EXISTS dupconstr;
NOTICE:  table "dupconstr" does not exist, skipping
create table dupconstr (
						i int,
						j int constraint test CHECK (j > 10),
						CONSTRAINT test1 UNIQUE (i,j));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "dupconstr_i_key" for table "dupconstr"
-- UNIQUE default behavior
create unique index distpol_uidx on distpol(c1);
-- ----------------------------------------------------------------------
-- Test: sql_default_distribution_sensitive/create_table_basic.sql
-- ----------------------------------------------------------------------
-- start_ignore
DROP TABLE IF EXISTS hobbies_r;
CREATE TABLE hobbies_r (
	name		text,
	person 		text
);
NOTICE:  Using default RANDOM distribution since no distribution was specified.
HINT:  Consider including the 'DISTRIBUTED BY' clause to determine the distribution of rows.
DROP TABLE IF EXISTS tenk1;
NOTICE:  table "tenk1" does not exist, skipping
CREATE TABLE tenk1 (
	unique1		int4,
	unique2		int4,
	two			int4,
	four		int4,
	ten			int4,
	twenty		int4,
	hundred		int4,
	thousand	int4,
	twothousand	int4,
	fivethous	int4,
	tenthous	int4,
	odd			int4,
	even		int4,
	stringu1	name,
	stringu2	name,
	string4		name
) WITH OIDS;
NOTICE:  Using default RANDOM distribution since no distribution was specified.
HINT:  Consider including the 'DISTRIBUTED BY' clause to determine the distribution of rows.
NOTICE:  OIDS=TRUE is not recommended for user-created tables. Use OIDS=FALSE to prevent wrap-around of the OID counter
-- end_ignore
select attrnums from gp_distribution_policy where
  localoid = 'hobbies_r'::regclass;
 attrnums 
----------
 
(1 row)

select attrnums from gp_distribution_policy where
  localoid = 'tenk1'::regclass;
 attrnums 
----------
 
(1 row)

-- ----------------------------------------------------------------------
-- Test: teardown.sql
-- ----------------------------------------------------------------------
-- start_ignore
drop schema create_table_default_distribution_on cascade;
NOTICE:  drop cascades to table tenk1
NOTICE:  drop cascades to table hobbies_r
NOTICE:  drop cascades to table dupconstr
NOTICE:  drop cascades to constraint test on table dupconstr
NOTICE:  drop cascades to table distpol
NOTICE:  drop cascades to table person_copy
NOTICE:  drop cascades to table person
NOTICE:  drop cascades to table bar
-- end_ignore
