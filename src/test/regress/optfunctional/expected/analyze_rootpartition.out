-- ----------------------------------------------------------------------
-- Test: setup.sql
-- ----------------------------------------------------------------------
-- start_ignore
create schema analyze_rootpartition;
set search_path to analyze_rootpartition;
drop table if exists t1 cascade;
NOTICE:  table "t1" does not exist, skipping
set gp_create_table_random_default_distribution=off;
create table t1(c1 int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t1 values(1);
-- end_ignore
-- ----------------------------------------------------------------------
-- Test: sql/analyze_rootpartition.sql
-- ----------------------------------------------------------------------
-- start_ignore
drop table if exists arp_test;
NOTICE:  table "arp_test" does not exist, skipping
drop table if exists arp_test2;
NOTICE:  table "arp_test2" does not exist, skipping
set gp_create_table_random_default_distribution=off;
create table arp_test(a int, b int) partition by range(b) (start(1) end(10) every(3));
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  CREATE TABLE will create partition "arp_test_1_prt_1" for table "arp_test"
NOTICE:  CREATE TABLE will create partition "arp_test_1_prt_2" for table "arp_test"
NOTICE:  CREATE TABLE will create partition "arp_test_1_prt_3" for table "arp_test"
insert into arp_test select i, i%9+1 from generate_series(1,1000) i;
create table arp_test2(a int, b int) partition by range(a) (start(1) end(10) every(3));
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  CREATE TABLE will create partition "arp_test2_1_prt_1" for table "arp_test2"
NOTICE:  CREATE TABLE will create partition "arp_test2_1_prt_2" for table "arp_test2"
NOTICE:  CREATE TABLE will create partition "arp_test2_1_prt_3" for table "arp_test2"
insert into arp_test2 select i%9+1, i from generate_series(1,1000) i;
-- end_ignore
-- @author shene
-- @created 2014-05-02 12:00:00
-- @product_version gpdb: [4.3-]
-- @db_name analyze_db
-- @tags analyze ORCA
-- @optimizer_mode both
-- @description Test 'ANALYZE ROOTPARTITION' functionality which only analyzes the root table of a partition table
select * from gp_toolkit.gp_stats_missing where smitable like 'arp_%' order by smitable;
       smischema       |     smitable      | smisize | smicols | smirecs 
-----------------------+-------------------+---------+---------+---------
 analyze_rootpartition | arp_test          | f       |       2 |       0
 analyze_rootpartition | arp_test2         | f       |       2 |       0
 analyze_rootpartition | arp_test2_1_prt_1 | f       |       2 |       0
 analyze_rootpartition | arp_test2_1_prt_2 | f       |       2 |       0
 analyze_rootpartition | arp_test2_1_prt_3 | f       |       2 |       0
 analyze_rootpartition | arp_test_1_prt_1  | f       |       2 |       0
 analyze_rootpartition | arp_test_1_prt_2  | f       |       2 |       0
 analyze_rootpartition | arp_test_1_prt_3  | f       |       2 |       0
(8 rows)

analyze rootpartition arp_test;
select * from gp_toolkit.gp_stats_missing where smitable like 'arp_%' order by smitable;
       smischema       |     smitable      | smisize | smicols | smirecs 
-----------------------+-------------------+---------+---------+---------
 analyze_rootpartition | arp_test2         | f       |       2 |       0
 analyze_rootpartition | arp_test2_1_prt_1 | f       |       2 |       0
 analyze_rootpartition | arp_test2_1_prt_2 | f       |       2 |       0
 analyze_rootpartition | arp_test2_1_prt_3 | f       |       2 |       0
(4 rows)

analyze rootpartition all;
select * from gp_toolkit.gp_stats_missing where smitable like 'arp_%' order by smitable;
 smischema | smitable | smisize | smicols | smirecs 
-----------+----------+---------+---------+---------
(0 rows)

analyze rootpartition arp_test(a);
-- negative tests below
-- to analyze all the root parts in the database, 'ALL' is required after rootpartition
analyze rootpartition;
ERROR:  relation "rootpartition" does not exist
-- if a table is specified, it must be a root part
analyze rootpartition arp_test_1_prt_1;
-- rootpartition cannot be specified with VACUUM
vacuum analyze rootpartition arp_test;
ERROR:  ROOTPARTITION option cannot be used together with VACUUM, try ANALYZE ROOTPARTITION
vacuum analyze rootpartition all;
ERROR:  ROOTPARTITION option cannot be used together with VACUUM, try ANALYZE ROOTPARTITION
vacuum rootpartition arp_test;
ERROR:  syntax error at or near "arp_test"
LINE 1: vacuum rootpartition arp_test;
                             ^
drop table arp_test;
drop table arp_test2;
-- when there are no partition tables in the database, analyze rootpartition should give a warning
analyze rootpartition all;
-- ----------------------------------------------------------------------
-- Test: sql/analyze_rootpartition_correctness.sql
-- ----------------------------------------------------------------------
-- start_ignore
drop table if exists arp_test3;
NOTICE:  table "arp_test3" does not exist, skipping
set gp_create_table_random_default_distribution=off;
create table arp_test3(a int, b int) partition by range(a) (start(1) end(10) every(3));
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  CREATE TABLE will create partition "arp_test3_1_prt_1" for table "arp_test3"
NOTICE:  CREATE TABLE will create partition "arp_test3_1_prt_2" for table "arp_test3"
NOTICE:  CREATE TABLE will create partition "arp_test3_1_prt_3" for table "arp_test3"
insert into arp_test3 select i%4+1, i from generate_series(1,1000) i;
insert into arp_test3 select 2, i from generate_series(1001,1050) i;
insert into arp_test3 select 3, i from generate_series(1051,1225) i;
insert into arp_test3 select 4, i from generate_series(1226,1600) i;
-- end_ignore
-- @author raghav
-- @created 2014-06-27 12:00:00
-- @product_version gpdb: [4.3-],hawq: [1.2.1.0-]
-- @db_name analyze_db
-- @tags analyze ORCA
-- @optimizer_mode both
-- @description Test 'ANALYZE ROOTPARTITION' correctness
-- check if analyze and analyze rootpartition generates same statistics
analyze arp_test3;
select * from pg_stats where tablename like 'arp_test3%' order by tablename, attname;
      schemaname       |     tablename     | attname | null_frac | avg_width | n_distinct | most_common_vals |         most_common_freqs          |                                                   histogram_bounds                                                    | correlation 
-----------------------+-------------------+---------+-----------+-----------+------------+------------------+------------------------------------+-----------------------------------------------------------------------------------------------------------------------+-------------
 analyze_rootpartition | arp_test3         | a       |         0 |         4 |          4 | {4,3,2,1}        | {0.390625,0.265625,0.1875,0.15625} |                                                                                                                       |    0.926199
 analyze_rootpartition | arp_test3         | b       |         0 |         4 |         -1 |                  |                                    | {1,64,128,192,256,320,384,448,512,576,640,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408,1472,1536,1600}      |    0.762744
 analyze_rootpartition | arp_test3_1_prt_1 | a       |         0 |         4 |          3 | {3,2,1}          | {0.435897,0.307692,0.25641}        |                                                                                                                       |    0.673855
 analyze_rootpartition | arp_test3_1_prt_1 | b       |         0 |         4 |         -1 |                  |                                    | {1,52,104,156,208,260,312,364,416,468,520,572,624,676,728,780,832,884,936,988,1030,1069,1108,1147,1186,1225}          |    0.842261
 analyze_rootpartition | arp_test3_1_prt_2 | a       |         0 |         4 |          1 | {4}              | {1}                                |                                                                                                                       |           1
 analyze_rootpartition | arp_test3_1_prt_2 | b       |         0 |         4 |         -1 |                  |                                    | {3,99,199,299,399,499,599,699,799,899,999,1250,1275,1300,1325,1350,1375,1400,1425,1450,1475,1500,1525,1550,1575,1600} |           1
(6 rows)

set allow_system_table_mods="DML";
delete from pg_statistic where starelid='arp_test3'::regclass;
select * from pg_stats where tablename like 'arp_test3%' order by tablename, attname;
      schemaname       |     tablename     | attname | null_frac | avg_width | n_distinct | most_common_vals |      most_common_freqs      |                                                   histogram_bounds                                                    | correlation 
-----------------------+-------------------+---------+-----------+-----------+------------+------------------+-----------------------------+-----------------------------------------------------------------------------------------------------------------------+-------------
 analyze_rootpartition | arp_test3_1_prt_1 | a       |         0 |         4 |          3 | {3,2,1}          | {0.435897,0.307692,0.25641} |                                                                                                                       |    0.673855
 analyze_rootpartition | arp_test3_1_prt_1 | b       |         0 |         4 |         -1 |                  |                             | {1,52,104,156,208,260,312,364,416,468,520,572,624,676,728,780,832,884,936,988,1030,1069,1108,1147,1186,1225}          |    0.842261
 analyze_rootpartition | arp_test3_1_prt_2 | a       |         0 |         4 |          1 | {4}              | {1}                         |                                                                                                                       |           1
 analyze_rootpartition | arp_test3_1_prt_2 | b       |         0 |         4 |         -1 |                  |                             | {3,99,199,299,399,499,599,699,799,899,999,1250,1275,1300,1325,1350,1375,1400,1425,1450,1475,1500,1525,1550,1575,1600} |           1
(4 rows)

analyze rootpartition arp_test3;
select * from pg_stats where tablename like 'arp_test3%' order by tablename, attname;
      schemaname       |     tablename     | attname | null_frac | avg_width | n_distinct | most_common_vals |         most_common_freqs          |                                                   histogram_bounds                                                    | correlation 
-----------------------+-------------------+---------+-----------+-----------+------------+------------------+------------------------------------+-----------------------------------------------------------------------------------------------------------------------+-------------
 analyze_rootpartition | arp_test3         | a       |         0 |         4 |          4 | {4,3,2,1}        | {0.390625,0.265625,0.1875,0.15625} |                                                                                                                       |    0.926199
 analyze_rootpartition | arp_test3         | b       |         0 |         4 |         -1 |                  |                                    | {1,64,128,192,256,320,384,448,512,576,640,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408,1472,1536,1600}      |    0.762744
 analyze_rootpartition | arp_test3_1_prt_1 | a       |         0 |         4 |          3 | {3,2,1}          | {0.435897,0.307692,0.25641}        |                                                                                                                       |   -0.469378
 analyze_rootpartition | arp_test3_1_prt_1 | b       |         0 |         4 |         -1 |                  |                                    | {1,52,104,156,208,260,312,364,416,468,520,572,624,676,728,780,832,884,936,988,1030,1069,1108,1147,1186,1225}          |    0.270385
 analyze_rootpartition | arp_test3_1_prt_2 | a       |         0 |         4 |          1 | {4}              | {1}                                |                                                                                                                       |           1
 analyze_rootpartition | arp_test3_1_prt_2 | b       |         0 |         4 |         -1 |                  |                                    | {3,99,199,299,399,499,599,699,799,899,999,1250,1275,1300,1325,1350,1375,1400,1425,1450,1475,1500,1525,1550,1575,1600} |           1
(6 rows)

drop table arp_test3;
-- ----------------------------------------------------------------------
-- Test: teardown.sql
-- ----------------------------------------------------------------------
-- start_ignore
drop schema analyze_rootpartition cascade;
NOTICE:  drop cascades to table t1
-- end_ignore
