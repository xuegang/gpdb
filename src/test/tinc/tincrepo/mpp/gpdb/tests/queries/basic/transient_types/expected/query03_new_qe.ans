-- start_ignore
-- end_ignore
-- Test when old QE got released, all types will be dispatched to new QE.
-- prepare a distributed table
drop table if exists t;
psql:/path/sql_file:1: NOTICE:  table "t" does not exist, skipping
DROP TABLE
create table t as select i as id from generate_series(1,8) i; 
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
SELECT 8
-- set QE release timeout 10ms
set gp_vmem_idle_resource_timeout=10;
SET
-- query 1 
select row(), row(1, 2), row(1, 'a', 'abc', 1.5) from t;
 row |  row  |      row      
-----+-------+---------------
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
(8 rows)

-- sleep 1000ms
select pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

-- query 2 
select row(1, 2, 3, 4, 5, 6), row(), row(1, 2, 3, 4, 5), row(1, 2), row(1, 2, 3, 4), row(1, 'a', 'abc', 1.5) from t;
      row      | row |     row     |  row  |    row    |      row      
---------------+-----+-------------+-------+-----------+---------------
 (1,2,3,4,5,6) | ()  | (1,2,3,4,5) | (1,2) | (1,2,3,4) | (1,a,abc,1.5)
 (1,2,3,4,5,6) | ()  | (1,2,3,4,5) | (1,2) | (1,2,3,4) | (1,a,abc,1.5)
 (1,2,3,4,5,6) | ()  | (1,2,3,4,5) | (1,2) | (1,2,3,4) | (1,a,abc,1.5)
 (1,2,3,4,5,6) | ()  | (1,2,3,4,5) | (1,2) | (1,2,3,4) | (1,a,abc,1.5)
 (1,2,3,4,5,6) | ()  | (1,2,3,4,5) | (1,2) | (1,2,3,4) | (1,a,abc,1.5)
 (1,2,3,4,5,6) | ()  | (1,2,3,4,5) | (1,2) | (1,2,3,4) | (1,a,abc,1.5)
 (1,2,3,4,5,6) | ()  | (1,2,3,4,5) | (1,2) | (1,2,3,4) | (1,a,abc,1.5)
 (1,2,3,4,5,6) | ()  | (1,2,3,4,5) | (1,2) | (1,2,3,4) | (1,a,abc,1.5)
(8 rows)

