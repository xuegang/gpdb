-- start_ignore
-- end_ignore
-- prepare a distributed table
drop table if exists t;
psql:/path/sql_file:1: NOTICE:  table "t" does not exist, skipping
DROP TABLE
create table t as select i as id from generate_series(1,8) i; 
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
SELECT 8
-- test row
select row(), row(1, 2), row(1, 'a', 'abc', 1.5) from t;
 row |  row  |      row      
-----+-------+---------------
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
 ()  | (1,2) | (1,a,abc,1.5)
(8 rows)

-- test function
create or replace function foo(in int, out int, out int) as
$$
select $1, $1;
$$ language sql;
CREATE FUNCTION
select row(id, 1), foo(id) from t;
  row  |  foo  
-------+-------
 (1,1) | (1,1)
 (2,1) | (2,2)
 (3,1) | (3,3)
 (4,1) | (4,4)
 (5,1) | (5,5)
 (6,1) | (6,6)
 (7,1) | (7,7)
 (8,1) | (8,8)
(8 rows)

-- cleanup
drop table t;
DROP TABLE
drop function foo(int);
DROP FUNCTION
