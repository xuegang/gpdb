-- start_ignore
-- end_ignore
-- prepare a distributed table
drop table if exists t;
psql:/path/sql_file:1: NOTICE:  table "t" does not exist, skipping
DROP TABLE
create table t as select i as id from generate_series(1,8) i; 
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
SELECT 8
-- create type
drop type if exists myudt;
psql:/path/sql_file:1: NOTICE:  type "myudt" does not exist, skipping
DROP TYPE
create type myudt as (i int, c char);
CREATE TYPE
-- test row
select row((1,'a')::myudt), row((2,'b')::myudt, 2) from t;
    row    |     row     
-----------+-------------
 ("(1,a)") | ("(2,b)",2)
 ("(1,a)") | ("(2,b)",2)
 ("(1,a)") | ("(2,b)",2)
 ("(1,a)") | ("(2,b)",2)
 ("(1,a)") | ("(2,b)",2)
 ("(1,a)") | ("(2,b)",2)
 ("(1,a)") | ("(2,b)",2)
 ("(1,a)") | ("(2,b)",2)
(8 rows)

-- test function
create or replace function foo(in int, out int, out myudt) as
$$
select $1, ($1, 't')::myudt;
$$ language sql;
CREATE FUNCTION
select row(id, 1), foo(id) from t;
  row  |     foo     
-------+-------------
 (1,1) | (1,"(1,t)")
 (2,1) | (2,"(2,t)")
 (3,1) | (3,"(3,t)")
 (4,1) | (4,"(4,t)")
 (5,1) | (5,"(5,t)")
 (6,1) | (6,"(6,t)")
 (7,1) | (7,"(7,t)")
 (8,1) | (8,"(8,t)")
(8 rows)

--cleanup
drop function foo(int);
DROP FUNCTION
drop type myudt;
DROP TYPE
drop table t;
DROP TABLE
