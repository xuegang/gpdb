-- start_ignore
SET optimizer=on;
SET
SET optimizer_log=on;
SET
-- end_ignore
-- 
-- @created 2009-01-27 14:00:00
-- @modified 2013-06-24 17:00:00
-- @tags ddl schema_topology
-- @description Joins
-- start_ignore
DROP TABLE IF EXISTS update_test;
psql:/path/sql_file:1: NOTICE:  table "update_test" does not exist, skipping
DROP TABLE
DROP TABLE IF EXISTS t1;
psql:/path/sql_file:1: NOTICE:  table "t1" does not exist, skipping
DROP TABLE
DROP TABLE IF EXISTS t2;
psql:/path/sql_file:1: NOTICE:  table "t2" does not exist, skipping
DROP TABLE
-- end_ignore
CREATE TABLE update_test (
	e INT DEFAULT 1,
	a INT DEFAULT 10,
	b INT,
	c TEXT
);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'e' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
INSERT INTO update_test(a,b,c) VALUES (5, 10, 'foo');
INSERT 0 1
INSERT INTO update_test(b,a) VALUES (15, 10);
INSERT 0 1
SELECT a,b,c FROM update_test ORDER BY a,b;
 a  | b  |  c  
----+----+-----
  5 | 10 | foo
 10 | 15 | 
(2 rows)

UPDATE update_test SET a = DEFAULT, b = DEFAULT;
UPDATE 2
SELECT a,b,c FROM update_test ORDER BY a,b;
 a  | b |  c  
----+---+-----
 10 |   | foo
 10 |   | 
(2 rows)

-- aliases for the UPDATE target table
UPDATE update_test AS t SET b = 10 WHERE t.a = 10;
UPDATE 2
SELECT a,b,c FROM update_test ORDER BY a,c;
 a  | b  |  c  
----+----+-----
 10 | 10 | foo
 10 | 10 | 
(2 rows)

UPDATE update_test t SET b = t.b + 10 WHERE t.a = 10;
UPDATE 2
SELECT a,b,c FROM update_test ORDER BY a,c;
 a  | b  |  c  
----+----+-----
 10 | 20 | foo
 10 | 20 | 
(2 rows)

UPDATE update_test SET a=v.i FROM (VALUES(100, 20)) AS v(i, j)
	WHERE update_test.b = v.j;
UPDATE 2
SELECT a,b,c FROM update_test ORDER BY a,c;
  a  | b  |  c  
-----+----+-----
 100 | 20 | foo
 100 | 20 | 
(2 rows)

-- ----------------------------------------------
-- Create 2 tables with the same columns, but distributed differently.
CREATE TABLE t1 (id INTEGER, data1 INTEGER, data2 INTEGER) DISTRIBUTED BY (id);
CREATE TABLE
CREATE TABLE t2 (id INTEGER, data1 INTEGER, data2 INTEGER) DISTRIBUTED BY (data1);
CREATE TABLE
INSERT INTO t1 (id, data1, data2) VALUES (1, 1, 1);
INSERT 0 1
INSERT INTO t1 (id, data1, data2) VALUES (2, 2, 2);
INSERT 0 1
INSERT INTO t1 (id, data1, data2) VALUES (3, 3, 3);
INSERT 0 1
INSERT INTO t1 (id, data1, data2) VALUES (4, 4, 4);
INSERT 0 1
INSERT INTO t2 (id, data1, data2) VALUES (1, 2, 101);
INSERT 0 1
INSERT INTO t2 (id, data1, data2) VALUES (2, 1, 102);
INSERT 0 1
INSERT INTO t2 (id, data1, data2) VALUES (3, 4, 103);
INSERT 0 1
INSERT INTO t2 (id, data1, data2) VALUES (4, 3, 104);
INSERT 0 1
-- Now let's try an update that would require us to move info across segments 
-- (depending upon exactly where the data is stored, which will vary depending 
-- upon the number of segments; in my case, I used only 2 segments).
UPDATE t1 SET data2 = t2.data2 FROM t2 WHERE t1.data1 = t2.data1;
UPDATE 4
SELECT * from t1;
 id | data1 | data2 
----+-------+-------
  2 |     2 |   101
  4 |     4 |   103
  1 |     1 |   102
  3 |     3 |   104
(4 rows)

DROP TABLE IF EXISTS update_test;
DROP TABLE
DROP TABLE IF EXISTS t1;
DROP TABLE
DROP TABLE IF EXISTS t2;
DROP TABLE

