-- 
-- @created 2009-01-27 14:00:00
-- @modified 2013-06-24 17:00:00
-- @tags ddl schema_topology
-- @description Joins with dpe

--start_ignore
DROP TABLE IF EXISTS foo1;
psql:/path/sql_file:1: NOTICE:  table "foo1" does not exist, skipping
DROP TABLE
DROP TABLE IF EXISTS foo2;
psql:/path/sql_file:1: NOTICE:  table "foo2" does not exist, skipping
DROP TABLE
--end_ignore
create table foo1 (i int, j varchar(10)) 
partition by list(j)
(partition p1 values('1'), partition p2 values('2'), partition p3 values('3'), partition p4 values('4'), partition p5 values('5'),partition p0 values('0'));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "foo1_1_prt_p1" for table "foo1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "foo1_1_prt_p2" for table "foo1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "foo1_1_prt_p3" for table "foo1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "foo1_1_prt_p4" for table "foo1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "foo1_1_prt_p5" for table "foo1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "foo1_1_prt_p0" for table "foo1"
CREATE TABLE
insert into foo1 select i , i%5 || '' from generate_series(1,100) i;
INSERT 0 100
create table foo2 (i int, j varchar(10));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
insert into foo2 select i , i ||'' from generate_series(1,5) i;
INSERT 0 5
analyze foo1;
ANALYZE
analyze foo2;
ANALYZE
explain select count(*) from foo1,foo2 where foo1.j = foo2.j;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=18.48..18.49 rows=1 width=8)
   InitPlan  (slice4)
     ->  Aggregate  (cost=2.06..2.08 rows=1 width=32)
           ->  Gather Motion 2:1  (slice3; segments: 2)  (cost=0.00..2.05 rows=3 width=2)
                 ->  Seq Scan on foo2  (cost=0.00..2.05 rows=3 width=2)
   ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=16.35..16.39 rows=1 width=8)
         ->  Aggregate  (cost=16.35..16.36 rows=1 width=8)
               ->  Hash Join  (cost=2.32..16.09 rows=51 width=0)
                     Hash Cond: public.foo1.j::text = public.foo2.j::text
                     ->  Append  (cost=0.00..12.00 rows=51 width=3)
                           ->  Result  (cost=0.00..2.20 rows=10 width=2)
                                 One-Time Filter: 79852::oid = ANY ($0)
                                 ->  Seq Scan on foo1_1_prt_p1 foo1  (cost=0.00..2.20 rows=10 width=2)
                           ->  Result  (cost=0.00..2.20 rows=10 width=2)
                                 One-Time Filter: 79876::oid = ANY ($0)
                                 ->  Seq Scan on foo1_1_prt_p2 foo1  (cost=0.00..2.20 rows=10 width=2)
                           ->  Result  (cost=0.00..2.20 rows=10 width=2)
                                 One-Time Filter: 79900::oid = ANY ($0)
                                 ->  Seq Scan on foo1_1_prt_p3 foo1  (cost=0.00..2.20 rows=10 width=2)
                           ->  Result  (cost=0.00..2.20 rows=10 width=2)
                                 One-Time Filter: 79924::oid = ANY ($0)
                                 ->  Seq Scan on foo1_1_prt_p4 foo1  (cost=0.00..2.20 rows=10 width=2)
                           ->  Result  (cost=0.00..1.00 rows=1 width=38)
                                 One-Time Filter: 79948::oid = ANY ($0)
                                 ->  Seq Scan on foo1_1_prt_p5 foo1  (cost=0.00..1.00 rows=1 width=38)
                           ->  Result  (cost=0.00..2.20 rows=10 width=2)
                                 One-Time Filter: 79972::oid = ANY ($0)
                                 ->  Seq Scan on foo1_1_prt_p0 foo1  (cost=0.00..2.20 rows=10 width=2)
                     ->  Hash  (cost=2.20..2.20 rows=5 width=2)
                           ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.20 rows=5 width=2)
                                 ->  Seq Scan on foo2  (cost=0.00..2.05 rows=3 width=2)
(31 rows)

select count(*) from foo1,foo2 where foo1.j = foo2.j;
 count 
-------
    80
(1 row)

