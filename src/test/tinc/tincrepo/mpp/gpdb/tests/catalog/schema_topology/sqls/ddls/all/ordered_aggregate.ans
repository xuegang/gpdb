-- 
-- @created 2009-01-27 14:00:00
-- @modified 2013-06-24 17:00:00
-- @tags ddl schema_topology
-- @description  Ordered aggregates

-- Create schema and set to it   
   Create Schema oagg;
CREATE SCHEMA
   SET search_path to oagg;
SET
-- Create quantity table
   Drop table IF EXISTS sch_quantity;
psql:/path/sql_file:1: NOTICE:  table "sch_quantity" does not exist, skipping
DROP TABLE
   create table sch_quantity ( prod_key integer, qty integer, price integer, product character(3));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'prod_key' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
-- inserting values into sch_quantity table
   insert into sch_quantity values (1,100, 50, 'p1');
INSERT 0 1
   insert into sch_quantity values (2,200, 100, 'p2');
INSERT 0 1
   insert into sch_quantity values (3,300, 200, 'p3');
INSERT 0 1
   insert into sch_quantity values (4,400, 35, 'p4');
INSERT 0 1
   insert into sch_quantity values (5,500, 40, 'p5');
INSERT 0 1
   insert into sch_quantity values (1,150, 50, 'p1');
INSERT 0 1
   insert into sch_quantity values (2,50, 100, 'p2');
INSERT 0 1
   insert into sch_quantity values (3,150, 200, 'p3');
INSERT 0 1
   insert into sch_quantity values (4,200, 35, 'p4');
INSERT 0 1
   insert into sch_quantity values (5,300, 40, 'p5');
INSERT 0 1
-- Create a new ordered aggregate with initial condition and finalfunc
   CREATE ORDERED AGGREGATE sch_array_accum_final (anyelement)
   (
      sfunc = array_append,
      stype = anyarray,
      finalfunc = array_out,
      initcond = '{}'
   );
CREATE AGGREGATE
-- Using newly created ordered aggregate array_accum_final
   select prod_key, sch_array_accum_final(qty order by prod_key,qty) from sch_quantity group by prod_key having prod_key < 5 order by prod_key;
 prod_key | sch_array_accum_final 
----------+-----------------------
        1 | {100,150}
        2 | {50,200}
        3 | {150,300}
        4 | {200,400}
(4 rows)

-- rename ordered aggregate
alter aggregate sch_array_accum_final (anyelement) rename to sch_array_accum_final_new;
ALTER AGGREGATE
-- check ordered aggregate
\df sch_array_accum_final_new;
                                 List of functions
 Schema |           Name            | Result data type | Argument data types | Type 
--------+---------------------------+------------------+---------------------+------
 oagg   | sch_array_accum_final_new | cstring          | anyelement          | agg
(1 row)

-- drop ordered aggregate
drop aggregate if exists sch_array_accum_final_new(anyelement);
DROP AGGREGATE
-- Drop Scehma
   Drop schema oagg CASCADE;
psql:/path/sql_file:1: NOTICE:  drop cascades to table sch_quantity
DROP SCHEMA
   SET search_path to public;
SET
