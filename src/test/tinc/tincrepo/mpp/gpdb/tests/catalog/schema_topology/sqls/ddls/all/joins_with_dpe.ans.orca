-- 
-- @created 2009-01-27 14:00:00
-- @modified 2013-06-24 17:00:00
-- @tags ddl schema_topology
-- @description Joins with dpe
--start_ignore
DROP TABLE IF EXISTS foo1;
DROP TABLE
DROP TABLE IF EXISTS foo2;
DROP TABLE
--end_ignore
create table foo1 (i int, j varchar(10)) 
partition by list(j)
(partition p1 values('1'), partition p2 values('2'), partition p3 values('3'), partition p4 values('4'), partition p5 values('5'),partition p0 values('0'));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "foo1_1_prt_p1" for table "foo1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "foo1_1_prt_p2" for table "foo1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "foo1_1_prt_p3" for table "foo1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "foo1_1_prt_p4" for table "foo1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "foo1_1_prt_p5" for table "foo1"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "foo1_1_prt_p0" for table "foo1"
CREATE TABLE
insert into foo1 select i , i%5 || '' from generate_series(1,100) i;
INSERT 0 100
create table foo2 (i int, j varchar(10));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
insert into foo2 select i , i ||'' from generate_series(1,5) i;
INSERT 0 5
analyze foo1;
ANALYZE
analyze foo2;
ANALYZE
explain select count(*) from foo1,foo2 where foo1.j = foo2.j;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..5.13 rows=1 width=8)
   ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..4.11 rows=1 width=1)
         ->  Hash Join  (cost=0.00..3.11 rows=1 width=1)
               Hash Cond: foo2.j::text = foo1.j::text
               ->  Table Scan on foo2  (cost=0.00..0.00 rows=3 width=2)
               ->  Hash  (cost=2.02..2.02 rows=1 width=8)
                     ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.02 rows=1 width=8)
                           ->  Sequence  (cost=0.00..1.01 rows=1 width=8)
                                 ->  Result  (cost=0.00..1.01 rows=1 width=8)
                                       ->  Function Scan on gp_partition_expansion  (cost=10.00..100.00 rows=50 width=4)
                                 ->  Dynamic Table Scan on foo1 (partIndex: 0)  (cost=0.00..0.00 rows=1 width=8)
 Settings:  optimizer=on
(12 rows)

select count(*) from foo1,foo2 where foo1.j = foo2.j;
 count 
-------
    80
(1 row)

