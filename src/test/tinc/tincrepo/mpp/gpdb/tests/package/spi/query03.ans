create language plpgsql;
psql:/path/sql_file:1: NOTICE:  language "plpgsql" already exists, skipping
CREATE LANGUAGE
drop table test;
DROP TABLE
create table test (a integer, b integer, c integer);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
insert into test select a, a%25, a%30 from generate_series(1, 100) a;
INSERT 0 100
create or replace function refcursor(int, int) returns setof int as $$
declare
    c1 cursor (param1 int, param2 int) for select * from test where a > param1 and b > param2;
    nonsense record;
    i int;
begin
    open c1($1, $2);
    fetch c1 into nonsense;
    close c1;
    if found then
	for i in $1 .. $2 loop
     		return next i + 1;
        end loop;

        return;
    else
	for i in $1 .. $2 loop
     		return next i - 1;
        end loop;

        return;
    end if;
end
$$ language plpgsql;
CREATE FUNCTION
select * from (select refcursor (1, 10)) t1, test;
psql:/path/sql_file:1: ERROR:  function cannot execute on segment because it accesses relation "public.test" (functions.c:155)  (seg0 slice1 test2:40000 pid=38704) (cdbdisp.c:1526)
DETAIL:  
	 SQL statement " select * from test where a >  $1  and b >  $2 "
PL/pgSQL function "refcursor" line 6 at open
drop function refcursor(int, int);
DROP FUNCTION
