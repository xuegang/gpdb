Copyright (C) 2004-2015 Pivotal Software, Inc. All rights reserved.

This program and the accompanying materials are made available under
the terms of the under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

================================================================================
TINC (a.k.a. "TINC Is Not Cdbfast") ============================================
================================================================================

	TINC is a new attempt at Greenplum's core testing infrastructure. From it's
name, it should be clear that TINC is designed with the pitfalls of its
predecessor in mind. The most important of these requirements is a philosophy
of rigid design at the core of the project. CDBFast lacked this quality, and
it's one that we'll strongly adhere to under TINC.

----------------------------------------
Rules ----------------------------------
----------------------------------------

	Rule #1: Read PEP8! <http://www.python.org/dev/peps/pep-0008/>

	Rule #2: See Rule #1.

The above usually covers most concerns. Here are a few extra ones we feel
strongly about:

* You must run `make check` prior to checkin.
* You must run `make regresscheck` prior to checkin.
* You cannot check-in any changes that break `make check` or `make regresscheck`.
* You must run `make checkcode` and fix your error before checkin.
* You should not use numbering in testcase name.
